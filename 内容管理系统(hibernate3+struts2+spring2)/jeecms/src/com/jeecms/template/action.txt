package #{action_p};

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Controller;

import #{entity_p}.#{Entity};
import #{manager_p}.#{Entity}Mng;
import com.ponyjava.common.hibernate3.OrderBy;

@SuppressWarnings("serial")
@Scope("prototype")
@Controller("#{sys}.#{entity}Act")
public class #{Entity}Act extends #{action_parent_p}.#{action_parent_name} {
	private static final Logger log = LoggerFactory.getLogger(#{Entity}.class);
	
	public String list() {
		this.pagination = #{entity}Mng.findAll(pageNo, getCookieCount(), OrderBy.desc("id"));
		return LIST;
	}

	public String add() {
		return ADD;
	}

	public String save() {
		#{entity}Mng.save(bean);
		log.info("新增 #{self_module_name} 成功:{}", bean.getName());
		return list();
	}

	public String edit() {
		this.bean = #{entity}Mng.findById(id);
		return EDIT;
	}

	public String update() {
		#{entity}Mng.updateDefault(bean);
		log.info("修改  #{self_module_name} 成功:{}", bean.getName());
		return list();
	}

	public String delete() {
		try {
			for (#{Entity} o : #{entity}Mng.deleteById(ids)) {
				log.info("删除  #{self_module_name} 成功:{}", o.getName());
			}
		} catch (DataIntegrityViolationException e) {
			addActionError("记录已被引用，不能删除!");
			log.info("删除 #{self_module_name} 失败，有外键约束:{}", bean.getName());
			return SHOW_ERROR;
		}
		return list();
	}
	
	public boolean validateSave() {
		if (hasErrors()) {
			return true;
		}
		bean.setWebsite(getWeb());
		return false;
	}

	public boolean validateEdit() {
		if (hasErrors()) {
			return true;
		}
		if (vldExist(id)) {
			return true;
		}
		if (vldWebsite(id, null)) {
			return true;
		}
		return false;
	}

	public boolean validateUpdate() {
		if (hasErrors()) {
			return true;
		}
		if (vldExist(bean.getId())) {
			return true;
		}
		if (vldWebsite(bean.getId(), null)) {
			return true;
		}
		bean.setWebsite(getWeb());
		return false;
	}

	public boolean validateDelete() {
		if (hasErrors()) {
			return true;
		}
		if (vldBatch()) {
			return true;
		}
		for (Long id : ids) {
			if (vldExist(id)) {
				return true;
			}
			if (vldWebsite(id, null)) {
				return true;
			}
		}
		return false;
	}
	
	private boolean vldExist(Long id) {
		#{Entity} entity = #{entity}Mng.findById(id);
		if (entity == null) {
			addActionError("数据不存在：" + id);
			return true;
		}
		return false;
	}

	private boolean vldWebsite(Long id, #{Entity} bean) {
		#{Entity} entity = #{entity}Mng.findById(id);
		if (!entity.getWebsite().equals(getWeb())) {
			addActionError("只能管理本站点数据：" + id);
			return true;
		}
		if (bean != null) {
			bean.setWebsite(getWeb());
		}
		return false;
	}
		
	@Autowired
	private #{Entity}Mng #{entity}Mng;
	private #{Entity} bean;

	public #{Entity} getBean() {
		return bean;
	}

	public void setBean(#{Entity} bean) {
		this.bean = bean;
	}
}